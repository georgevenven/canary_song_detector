def load_song():
    pass

def smoothed_power():
    pass

def f_eproc(nfft, hop, nfft_periodicity, hop_periodicity, filenumber, dir_name):
    # Get a list of all wav files in the directory
    files = os.listdir(dir_name)
    wav_files = [f for f in files if f.endswith('.wav')]

    # Check if there are any files in the directory
    if len(wav_files) == 0:
        print('No wav files in the directory')
        return

    # Full path to the selected file
    file_path = os.path.join(dir_name, wav_files[filenumber - 1])

    # Load the first wav file
    y, Fs = scipy.io.wavfile.read(file_path)

    y = np.concatenate([np.zeros(nfft // 2), y, np.zeros(nfft // 2)])
    
    # Compute the spectrogram
    window = np.hamming(nfft)
    noverlap = nfft - hop
    f, t, s = spectrogram(y, window, noverlap, nfft, Fs, axis='yaxis')

    # Display the spectrogram
    plt.figure(1)
    s2 = np.flipud(s[0:20, :])
    plt.imshow(np.log(np.abs(s2) + 1), aspect='auto', origin='lower', cmap='jet')
    plt.xlabel('Time (s)')
    plt.ylabel('Frequency (Hz)')
    plt.title('Spectrogram')
    plt.colorbar()w

    g = np.sum(np.abs(s), axis=0)  # Sum along frequency axis

    window = np.hamming(nfft_periodicity)
    noverlap = nfft_periodicity - hop_periodicity
    nfft = nfft_periodicity
    g = np.concatenate([np.zeros(nfft_periodicity // 2), g, np.zeros(nfft_periodicity // 2)])
    periodicity, _, _ = spectrogram(g - np.mean(g), window, noverlap, nfft, Fs, axis='yaxis')

    plt.figure(2)
    plt.imshow(np.log(100 + np.abs(np.flipud(periodicity[0:200, :]))), aspect='auto', origin='lower')
    plt.colorbar()

    nn = dst(np.abs(periodicity))  # discrete sine transform
    nn2 = dct(np.abs(periodicity))  # discrete cosine transform

    im1 = np.zeros((nn.shape[0], nn.shape[1], 3))
    im1[:, :, 0] = (nn - np.mean(nn)) / np.std(nn)
    im1[:, :, 1] = (nn2 - np.mean(nn2)) / np.std(nn2)
    im1[:, :, 2] = (nn2 - np.mean(nn2)) / np.std(nn2)

    plt.figure(3)
    plt.imshow(im1)
    plt.show()

# Example usage:
nfft = 1024
hop = 512
nfft_periodicity = 512
hop_periodicity = 256
filenumber = 1

f_eproc(nfft, hop, nfft_periodicity, hop_periodicity, filenumber)
